{
    
    
    "paths": {
        "/managedPolicy": {},
        "/managedPolicy/{id}": {},
   
        "/managedPolicyCondition": {},
        "/managedPolicyCondition/{id}": {},
        
        "/managedPolicyEvent": {},
        "/managedPolicyEvent/{id}": {},
        
        "/managedPolicyExpression": {},
        "/managedPolicyExpression/{id}": {},
        
        "/managedPolicyOperator": {},
        "/managedPolicyOperator/{id}": {},
        
        "/managedPolicyVariable": {},
        "/managedPolicyVariable/{id}": {},
        
        "/managedPolicyAction": {},
        "/managedPolicyAction/{id}": {},
        
        "/managedPolicyConstraint": {},
        "/managedPolicyConstraint/{id}": {},
        
        "/policyDomain": {},
        "/policyDomain/{id}": {},
        
        "/policyCatalog": {},
        "/policyCatalog/{id}": {},
        
    "components": {
        "schemas": {
            "Addressable": {
                "type": "object",
                "description": "Base schema for adressable entities",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "Hyperlink reference"
                    },
                    "id": {
                        "type": "string",
                        "description": "unique identifier"
                    }
                },
                "required": [
                    "id",
                    "href"
                ]
            },
            
            "AnyValue": {
                "nullable": true,
                "anyOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "integer"
                    },
                    {
                        "type": "number"
                    },
                    {
                        "type": "boolean"
                    },
                    {
                        "type": "object"
                    },
                    {
                        "type": "array"
                    }
                ]
            },
            "BaseEvent": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Entity"
                    },
                    {
                        "type": "object",
                        "description": "Base event with common attributes.",
                        "properties": {
                            "event": {
                                "type": "object"
                            },
                            "eventId": {
                                "type": "string",
                                "description": "The identifier of the notification."
                            },
                            "eventTime": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Time of the event occurrence."
                            },
                            "eventType": {
                                "type": "string",
                                "description": "The type of the notification."
                            },
                            "correlationId": {
                                "type": "string",
                                "description": "The correlation id for this event."
                            },
                            "domain": {
                                "type": "string",
                                "description": "The domain of the event."
                            },
                            "title": {
                                "type": "string",
                                "description": "The title of the event."
                            },
                            "description": {
                                "type": "string",
                                "description": "An explanatory of the event."
                            },
                            "priority": {
                                "type": "string",
                                "description": "A priority."
                            },
                            "timeOcurred": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The time the event occured."
                            }
                        }
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "BaseEvent": "#/components/schemas/BaseEvent"
                    }
                }
            },
            "Characteristic": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "type": "object",
                        "description": "Describes a given characteristic of an object or entity through a name/value pair.",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Unique identifier of the characteristic"
                            },
                            "valueType": {
                                "type": "string",
                                "description": "Data type of the value of the characteristic"
                            },
                            "characteristicRelationship": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CharacteristicRelationship"
                                }
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the characteristic"
                            }
                        }
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "Characteristic": "#/components/schemas/Characteristic"
                    }
                }
            },
            "CharacteristicRelationship": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "type": "object",
                        "description": "Another Characteristic that is related to the current Characteristic;",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Unique identifier of the characteristic"
                            },
                            "relationshipType": {
                                "type": "string",
                                "description": "The type of relationship"
                            }
                        }
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship"
                    }
                }
            },
            "Entity": {
                "type": "object",
                "description": "Base entity schema for use in TMForum Open-APIs. Property.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "$ref": "#/components/schemas/Addressable"
                    }
                ]
            },
            "EntityRef": {
                "type": "object",
                "description": "Entity reference schema to be use for all entityRef class.",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "Hyperlink reference"
                    }
                }
            },
            
            "Event": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "type": "object",
                        "description": "event with common attributes.",
                        "properties": {
                            "href": {
                                "type": "string",
                                "description": "Hyperlink reference"
                            },
                            "id": {
                                "type": "string",
                                "description": "unique identifier"
                            },
                            "correlationId": {
                                "type": "string",
                                "description": "The correlation id for this event."
                            },
                            "domain": {
                                "type": "string",
                                "description": "The domain of the event."
                            },
                            "title": {
                                "type": "string",
                                "description": "The title of the event."
                            },
                            "description": {
                                "type": "string",
                                "description": "An explnatory of the event."
                            },
                            "priority": {
                                "type": "string",
                                "description": "A priority."
                            },
                            "timeOccurred": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The time the event occurred."
                            },
                            "source": {
                                "$ref": "#/components/schemas/EntityRef"
                            },
                            "reportingSystem": {
                                "$ref": "#/components/schemas/EntityRef"
                            },
                            "relatedParty": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedParty"
                                }
                            },
                            "analyticCharacteristic": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Characteristic"
                                }
                            },
                            "eventId": {
                                "type": "string",
                                "description": "The identifier of the notification."
                            },
                            "eventTime": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Time of the event occurrence."
                            },
                            "eventType": {
                                "type": "string",
                                "description": "The type of the notification."
                            },
                            "event": {
                                "description": "The event linked to the involved resource object",
                                "type": "object"
                            }
                        }
                    }
                ]
            },
            "Extensible": {
                "type": "object",
                "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
                "properties": {
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class Extensible name"
                    },
                    "@baseType": {
                        "type": "string",
                        "description": "When sub-classing, this defines the super-class"
                    },
                    "@schemaLocation": {
                        "type": "string",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                    }
                },
                "required": [
                    "@type"
                ]
            },
            "ManagedPolicy": {
                "description": "Managed Policy",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyManagedEntity"
                    },
                    {
                        "$ref": "#/components/schemas/Policy"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "ManagedPolicy": "#/components/schemas/ManagedPolicy"
                    }
                }
            },
            "ManagedPolicyAction": {
                "description": "Managed PolicyAction",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyManagedEntity"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyAction"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction"
                    }
                }
            },
            
            "ManagedPolicyCondition": {
                "description": "Managed PolicyCondition",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyManagedEntity"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyCondition"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition"
                    }
                }
            },
            
            "ManagedPolicyConstraint": {
                "description": "Managed PolicyConstraint",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyManagedEntity"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyConstraint"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint"
                    }
                }
            },
            
            "ManagedPolicyExpression": {
                "description": "Managed PolicyExpression",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyManagedEntity"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyExpression"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression"
                    }
                }
            },
            
            
            "ManagedPolicyOperator": {
                "description": "Managed PolicyOperator",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyManagedEntity"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyOperator"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator"
                    }
                }
            },
            
            "ManagedPolicyVariable": {
                "description": "Managed PolicyVariable",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyManagedEntity"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyVariable"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable"
                    }
                }
            },
            
            "Note": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "type": "object",
                        "description": "Extra information about a given entity",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Identifier of the note within its containing entity",
                                "example": [
                                    "afa9-3d90aaa8da0f"
                                ]
                            },
                            "author": {
                                "type": "string",
                                "description": "Author of the note",
                                "example": [
                                    "Mr. N. Bene"
                                ]
                            },
                            "date": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date of the note",
                                "example": [
                                    "2020-11-20T08:00:00Z"
                                ]
                            },
                            "text": {
                                "type": "string",
                                "description": "Text of the note",
                                "example": [
                                    "This is important"
                                ]
                            }
                        }
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "Note": "#/components/schemas/Note"
                    }
                }
            },
            
            "Policy": {
                "type": "object",
                "description": "Policy is a set of rules that are used to manage and control the state and state transitions of one or more managed objects.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyRule"
                    },
                    {
                        "$ref": "#/components/schemas/PolicySet"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyRule": "#/components/schemas/PolicyRule",
                        "PolicySet": "#/components/schemas/PolicySet"
                    }
                }
            },
            "PolicyAction": {
                "type": "object",
                "description": "",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyActionAtomic"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyActionComposite"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyActionAtomic": "#/components/schemas/PolicyActionAtomic",
                        "PolicyActionComposite": "#/components/schemas/PolicyActionComposite"
                    }
                }
            },
            "PolicyActionAtomic": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyActionBase"
                    },
                    {
                        "description": "",
                        "properties": {
                            "@type": {
                                "type": "string"
                            },
                            "action": {
                                "$ref": "#/components/schemas/PolicyStatement"
                            }
                        }
                    }
                ]
            },
            
            "PolicyActionBase": {
                "description": "A superclass (set of shared properties) inherited by PolicyActionAtomic and PolicyActionComposite.",
                "properties": {
                    "constraint": {
                        "$ref": "#/components/schemas/PolicyConstraintRefOrValue"
                    },
                    "executedAt": {
                        "type": "array",
                        "description": "Defines when will this action be triggered, before Policy calculation, or after what calculated PolicyEffect",
                        "items": {
                            "type": "string",
                            "enum": [
                                "beforeAll",
                                "beforePolicy",
                                "onPermit",
                                "onDeny",
                                "onIndeterminate",
                                "onResolved",
                                "always",
                                "afterAll"
                            ]
                        }
                    }
                }
            },
            
            "PolicyActionComposite": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyActionBase"
                    },
                    {
                        "description": "",
                        "properties": {
                            "@type": {
                                "type": "string"
                            },
                            "action": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PolicyActionRelationship"
                                },
                                "minItems": 1
                            }
                        }
                    }
                ]
            },
            
            "PolicyActionRef": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Reference"
                    },
                    {
                        "type": "object",
                        "description": "Reference to PolicyAction object",
                        "properties": {
                            "@type": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "PolicyActionRefOrValue": {
                "type": "object",
                "description": "Container for PolicyAction Reference or unmanaged PolicyAction object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyActionRef"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyAction"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyActionRef": "#/components/schemas/PolicyActionRef",
                        "PolicyAction": "#/components/schemas/PolicyAction",
                        "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction"
                    }
                }
            },
            
            "PolicyActionRelationship": {
                "type": "object",
                "description": "Contains details of a PolicyActionRelationship",
                "properties": {
                    "priority": {
                        "type": "integer",
                        "description": "Sequence value when PolicyEvent has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
                        "default": 0
                    },
                    "constraint": {
                        "$ref": "#/components/schemas/PolicyConstraintRefOrValue"
                    },
                    "policyActionRefOrValue": {
                        "$ref": "#/components/schemas/PolicyActionRefOrValue"
                    }
                }
            },
            
            "PolicyBase": {
                "description": "A superclass (set of shared properties) inherited by PolicyRule and PolicySet.",
                "properties": {
                    "actionExecutionStrategy": {
                        "type": "string",
                        "description": "executionStrategy attribute defines the strategy to be used when executing the sequenced actions aggregated by this Policy",
                        "enum": [
                            "DoUntilSuccess",
                            "DoAll",
                            "DoUntilFailure",
                            "DoAllWithoutFailureOrDoNothing"
                        ],
                        "default": "DoAll"
                    },
                    "sequencedActions": {
                        "type": "string",
                        "description": "Defines how the ordering of the PolicyActions associated with this Policy is to be interpreted.",
                        "enum": [
                            "Mandatory",
                            "Recommended",
                            "BestEffort"
                        ],
                        "default": "Mandatory"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Policy sequence value when Policy has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy. If a Policy is part of a PolicySet, priority on PolicySet overrides this priority",
                        "default": 0
                    },
                    "policyDomainRef": {
                        "type": "array",
                        "description": "List of all Policy Domains for which this Policy is applicable",
                        "items": {
                            "$ref": "#/components/schemas/Reference"
                        }
                    },
                    "policyEventRelationship": {
                        "type": "array",
                        "description": "List of all Policy Events for which this Policy is triggered",
                        "items": {
                            "$ref": "#/components/schemas/PolicyEventRelationship"
                        },
                        "minItems": 1
                    },
                    "policyActionRelationship": {
                        "type": "array",
                        "description": "List of all Policy Actions which are executed when this Policy is processed",
                        "items": {
                            "$ref": "#/components/schemas/PolicyActionRelationship"
                        },
                        "minItems": 1
                    }
                }
            },
            
            "PolicyCatalog": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyManagedEntity"
                    },
                    {
                        "description": "A logical container of all Policy entites. Used to extract Policy details and provide it to the Policy Execution engine",
                        "properties": {
                            "policyDomainFilter": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Reference"
                                }
                            },
                            "policy": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManagedPolicy"
                                }
                            },
                            "policyEvent": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManagedPolicyEvent"
                                }
                            },
                            "policyCondition": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManagedPolicyCondition"
                                }
                            },
                            "policyExpression": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManagedPolicyExpression"
                                }
                            },
                            "policyOperator": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManagedPolicyOperator"
                                }
                            },
                            "policyVariable": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManagedPolicyVariable"
                                }
                            },
                            "policyAction": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManagedPolicyAction"
                                }
                            },
                            "policyConstraint": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManagedPolicyConstraint"
                                }
                            }
                        }
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyCatalog": "#/components/schemas/PolicyCatalog"
                    }
                }
            },
            
            "PolicyCondition": {
                "type": "object",
                "description": "A PolicyCondition clause is an aggregation of individual PolicyConditions, and is treated as an atomic object that is aggregated by a PolicyRule. It is represented as a Boolean expression, and defines the necessary state and/or prerequisites that define whether the actions aggregated by that same PolicyRule should be performed. If PolicyCondition is successfully resolved then it must hold value TRUE or FALSE. Non successfull resolution does not contain any boolean value",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyConditionAtomic"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyConditionComposite"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyConditionAtomic": "#/components/schemas/PolicyConditionAtomic",
                        "PolicyConditionComposite": "#/components/schemas/PolicyConditionComposite"
                    }
                }
            },
            "PolicyConditionAtomic": {
                "type": "object",
                "description": "PolicyCondition that executes only one statement",
                "properties": {
                    "@type": {
                        "type": "string"
                    },
                    "isResultNegated": {
                        "type": "boolean",
                        "default": "false"
                    },
                    "statement": {
                        "$ref": "#/components/schemas/PolicyStatement"
                    }
                }
            },
            
            "PolicyConditionComposite": {
                "type": "object",
                "description": "PolicyCondition that executes one or many PolicyConditions, applying condition combination logic",
                "properties": {
                    "@type": {
                        "type": "string"
                    },
                    "condition": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PolicyConditionRefOrValue"
                        },
                        "minItems": 1
                    },
                    "conditionCombinationLogic": {
                        "type": "string",
                        "description": "Following combination logic is applied: \n * anyOf - if ANY condition resolves to TRUE, end result is TRUE \n * allOf - if ALL conditions resolves to TRUE, end result is TRUE \n * oneOf - if exactly ONE condition resolves to TRUE, end result is TRUE \n * none - if NONE condition resolves to TRUE, end result is TRUE",
                        "enum": [
                            "anyOf",
                            "allOf",
                            "oneOf",
                            "none"
                        ]
                    },
                    "isResultNegated": {
                        "type": "boolean",
                        "default": "false"
                    }
                }
            },
            
            "PolicyConditionRef": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Reference"
                    },
                    {
                        "type": "object",
                        "description": "Reference to managed PolicyCondition object",
                        "properties": {
                            "@type": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "PolicyConditionRefOrValue": {
                "type": "object",
                "description": "Container for PolicyCondition Reference or unmanaged PolicyCondition object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyConditionRef"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyCondition"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyConditionRef": "#/components/schemas/PolicyConditionRef",
                        "PolicyCondition": "#/components/schemas/PolicyCondition",
                        "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition"
                    }
                }
            },
            
            "PolicyConstraint": {
                "description": "Any kind of condition that needs to be confirmed in order to proceed with next step",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyEventConstraint"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyCondition"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyEventConstraint": "#/components/schemas/PolicyEventConstraint",
                        "PolicyCondition": "#/components/schemas/PolicyCondition",
                        "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition"
                    }
                }
            },
            "PolicyConstraintRef": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Reference"
                    },
                    {
                        "type": "object",
                        "description": "Reference to managed PolicyConstraint object",
                        "properties": {
                            "@type": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "PolicyConstraintRefOrValue": {
                "type": "object",
                "description": "Container for PolicyConstraint Reference or unmanaged PolicyConstraint object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyConstraintRef"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyConstraint"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyConstraintRef": "#/components/schemas/PolicyConstraintRef",
                        "PolicyConstraint": "#/components/schemas/PolicyConstraint",
                        "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint"
                    }
                }
            },
            
            "PolicyDomain": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyManagedEntity"
                    },
                    {
                        "description": "",
                        "properties": {
                            "scopedManagedEntity": {
                                "type": "array",
                                "description": "List of entities to which this PolicyDomain applies",
                                "items": {
                                    "$ref": "#/components/schemas/Reference"
                                },
                                "minItems": 1
                            },
                            "subDomainRef": {
                                "type": "array",
                                "description": "List of child PolicyDomains. PolicyDomain can have many child Policy Domains, but one child PolicyDomain can only have one parent PolicyDomain",
                                "items": {
                                    "$ref": "#/components/schemas/Reference"
                                }
                            }
                        }
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyDomain": "#/components/schemas/PolicyDomain"
                    }
                }
            },
            
            "PolicyEvent": {
                "type": "object",
                "description": "A PolicyEvent is an occurrence of an important event or multiple events, and can be used to trigger the evaluation of a Policy",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyEventAtomicBase"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyEventComposite"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyEventAtomicBase": "#/components/schemas/PolicyEventAtomicBase",
                        "PolicyEventComposite": "#/components/schemas/PolicyEventComposite"
                    }
                }
            },
            "PolicyEventAtomicBase": {
                "additionalProperties": true,
                "type": "object",
                "description": "A PolicyEventAtomic is an occurrence of a single atomic event. It must be used as a abstract class overloaded by a particular event in TMF API domain for which Policy is defined"
            },
            
            "PolicyEventComposite": {
                "type": "object",
                "description": "A PolicyEventComposite is an event made of multiple PolicyEvents.",
                "properties": {
                    "@type": {
                        "type": "string"
                    },
                    "policyEventRelationship": {
                        "type": "array",
                        "description": "Contains set of aggregated PolicyEvents",
                        "items": {
                            "$ref": "#/components/schemas/PolicyEventRelationship"
                        },
                        "minItems": 1
                    }
                }
            },
            
            "PolicyEventConstraint": {
                "description": "Constraint based on provided list of PolicyEvent references. If PolicyEvent type is found in the list then constraint is validated truthfully",
                "properties": {
                    "@type": {
                        "type": "string"
                    },
                    "policyEventType": {
                        "type": "array",
                        "description": "List of PolicyEvent types",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1
                    }
                }
            },
            
            "PolicyEventRef": {
                "type": "object",
                "description": "Reference to PolicyEvent object",
                "properties": {
                    "@type": {
                        "type": "string"
                    },
                    "@referredType": {
                        "type": "string",
                        "description": "The actual type of the target instance when needed for disambiguation."
                    }
                }
            },
            "PolicyEventRefOrValue": {
                "type": "object",
                "description": "Container for PolicyEvent Reference or PolicyEvent object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyEventRef"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyEvent"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyEventRef": "#/components/schemas/PolicyEventRef",
                        "PolicyEvent": "#/components/schemas/PolicyEvent",
                        "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent"
                    }
                }
            },
            
            "PolicyEventRelationship": {
                "type": "object",
                "description": "Contains details of a PolicyEventRelationship",
                "properties": {
                    "priority": {
                        "type": "integer",
                        "description": "Sequence value when PolicyEvent has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
                        "default": 0
                    },
                    "constraint": {
                        "$ref": "#/components/schemas/PolicyConstraintRefOrValue"
                    },
                    "policyEventRefOrValue": {
                        "$ref": "#/components/schemas/PolicyEventRefOrValue"
                    }
                }
            },
            
            "PolicyExpression": {
                "type": "object",
                "description": "PolicyExpression is a constraint based on text expression and parsed by an Expression Language (SpEL, JS, Groovy, FEEL, ...)",
                "properties": {
                    "@type": {
                        "type": "string"
                    },
                    "expression": {
                        "type": "string",
                        "description": "Expression language command"
                    },
                    "expressionLanguage": {
                        "description": "Defines expression language used to build expression",
                        "type": "string",
                        "example": "JS"
                    }
                }
            },
            "PolicyExpressionRef": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Reference"
                    },
                    {
                        "type": "object",
                        "description": "Reference to managed PolicyExpression object",
                        "properties": {
                            "@type": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "PolicyExpressionRefOrValue": {
                "type": "object",
                "description": "Container for PolicyExpression Reference or unmanaged PolicyExpression object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyExpressionRef"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyExpression"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyExpressionRef": "#/components/schemas/PolicyExpressionRef",
                        "PolicyExpression": "#/components/schemas/PolicyExpression",
                        "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression"
                    }
                }
            },
            
            "PolicyManagedEntity": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Entity"
                    },
                    {
                        "description": "Fields required for managed (reusable) Policy entities",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the Policy Entity"
                            },
                            "version": {
                                "type": "string",
                                "description": "Version of the Policy Entity"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the Policy Entity"
                            },
                            "lifecycleState": {
                                "type": "string",
                                "description": "Lifecycle state of the Policy Entity",
                                "enum": [
                                    "inDesign",
                                    "designed",
                                    "active",
                                    "retired",
                                    "rejected"
                                ]
                            },
                            "validFor": {
                                "$ref": "#/components/schemas/TimePeriod"
                            },
                            "note": {
                                "type": "array",
                                "description": "Comments related to Policy Entity",
                                "items": {
                                    "$ref": "#/components/schemas/Note"
                                }
                            }
                        }
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity",
                        "PolicyDomain": "#/components/schemas/PolicyDomain",
                        "PolicyCatalog": "#/components/schemas/PolicyCatalog",
                        "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable",
                        "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator",
                        "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression",
                        "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent",
                        "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint",
                        "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition",
                        "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction",
                        "ManagedPolicy": "#/components/schemas/ManagedPolicy"
                    }
                }
            },
            

            "PolicyOperator": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "type": "object",
                        "description": "A PolicyOperator is a class that defines possible operations with needed operands on a specific variables",
                        "properties": {
                            "variable": {
                                "$ref": "#/components/schemas/PolicyVariableRefOrValue"
                            }
                        }
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyOperator": "#/components/schemas/PolicyOperator",
                        "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator"
                    }
                }
            },
            "PolicyOperatorRef": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Reference"
                    },
                    {
                        "type": "object",
                        "description": "Reference to managed PolicyOperator object",
                        "properties": {
                            "@type": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "PolicyOperatorRefOrValue": {
                "type": "object",
                "description": "Container for PolicyOperator Reference or unmanaged PolicyOperator object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyOperatorRef"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyOperator"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyOperatorRef": "#/components/schemas/PolicyOperatorRef",
                        "PolicyOperator": "#/components/schemas/PolicyOperator",
                        "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator"
                    }
                }
            },
            
            "PolicyRef": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Reference"
                    },
                    {
                        "type": "object",
                        "description": "Reference to managed Policy object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "unique identifier"
                            },
                            "href": {
                                "type": "string",
                                "description": "Hyperlink reference"
                            },
                            "version": {
                                "type": "string"
                            },
                            "@type": {
                                "type": "string",
                                "description": "When sub-classing, this defines the sub-class Extensible name"
                            },
                            "@baseType": {
                                "type": "string",
                                "description": "When sub-classing, this defines the super-class"
                            },
                            "@schemaLocation": {
                                "type": "string",
                                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                            }
                        }
                    }
                ]
            },
            "PolicyRefOrValue": {
                "type": "object",
                "description": "Container for Policy Reference or unmanaged Policy object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyRef"
                    },
                    {
                        "$ref": "#/components/schemas/Policy"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyRef": "#/components/schemas/PolicyRef",
                        "Policy": "#/components/schemas/Policy",
                        "ManagedPolicy": "#/components/schemas/ManagedPolicy"
                    }
                }
            },
            
            "PolicyRelationship": {
                "type": "object",
                "description": "Contains details of a PolicyRelationship",
                "properties": {
                    "priority": {
                        "type": "integer",
                        "description": "Policy sequence value when Policy has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
                        "default": 0
                    },
                    "constraint": {
                        "$ref": "#/components/schemas/PolicyConstraintRefOrValue"
                    },
                    "policyRefOrValue": {
                        "$ref": "#/components/schemas/PolicyRefOrValue"
                    }
                }
            },
            
            "PolicyRule": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyBase"
                    },
                    {
                        "type": "object",
                        "description": "A PolicyRule is an intelligent data container. It contains data that define how the PolicyRule is used in a managed environment as well as a specification of behavior that dictates how the managed entities that it applies to will interact. The contained data is of four types: \n * data and metadata that define the semantics and behavior of the policy rule and the behavior that it imposes on the rest of the system,\n * a group of events that can be used to trigger the evaluation of the condition clause of a policy rule,\n * a group of conditions aggregated by the PolicyRule,\n * group of actions aggregated by the PolicyRule.",
                        "properties": {
                            "@type": {
                                "type": "string"
                            },
                            "targetPolicyEffect": {
                                "type": "string",
                                "description": "If underlying PolicyCondition resolves to TRUE, denotes target effect of a PolicyRule. If PolicyCondition is not resolved, then Policy effect is marked INDETERMINATE. If Policy is not run at all (because of Policy Constraints), then Policy effect is marked NOT_APPLICABLE.",
                                "enum": [
                                    "Permit",
                                    "Deny"
                                ]
                            },
                            "policyConditionRefOrValue": {
                                "$ref": "#/components/schemas/PolicyConditionRefOrValue"
                            }
                        }
                    }
                ]
            },
            
            "PolicySet": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PolicyBase"
                    },
                    {
                        "type": "object",
                        "description": "A PolicySet is an aggregation of PolicyRules or PolicySets combined according to provided algorithm",
                        "properties": {
                            "@type": {
                                "type": "string"
                            },
                            "combiningAlgorithm": {
                                "type": "string",
                                "description": "defines a procedure for arriving at the result given the individual results of PolicyRule evaluations: \n * DenyOverrides - if a Policy element is encountered that evaluates to DENY, then, regardless of the evaluation result of the other Policy elements, the combined result is DENY. \n * PermitOverrides - if a Policy element is encountered that evaluates to PERMIT, then, regardless of the evaluation result of the other Policy elements, the combined result is PERMIT. \n * FirstApplicable - the combined result is the same as the result of successfull evaluating the first Policy. \n * OnlyOneApplicable - The result of this combining algorithm ensures that one and only one Policy is applicable by virtue of their targets.  If no Policy applies, then the result is NOT_APPLICABLE, but if more than one Policy is applicable, then the result is INDETERMINATE.  When exactly one Policy is applicable, the result of the combining algorithm is the result of that Policy. \n * DenyUnlessPermit - intended for those cases where a PERMIT decision should have priority over a DENY decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result. \n * PermitUnlessDeny - intended for those cases where a DENY decision should have priority over a PERMIT decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result.",
                                "enum": [
                                    "DenyOverrides",
                                    "PermitOverrides",
                                    "FirstApplicable",
                                    "OnlyOneApplicable",
                                    "DenyUnlessPermit",
                                    "PermitUnlessDeny"
                                ]
                            },
                            "policyRelationship": {
                                "type": "array",
                                "description": "List of all Policies that need to be executed",
                                "items": {
                                    "$ref": "#/components/schemas/PolicyRelationship"
                                },
                                "minItems": 1
                            }
                        }
                    }
                ]
            },
            
            "PolicyStatement": {
                "type": "object",
                "description": "PolicyStatement is a definition of a: \n * query statement that resolves to boolean value or \n * command statement that is changing a value",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyOperatorRefOrValue"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyExpressionRefOrValue"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyOperatorRefOrValue": "#/components/schemas/PolicyOperatorRefOrValue",
                        "PolicyExpressionRefOrValue": "#/components/schemas/PolicyExpressionRefOrValue"
                    }
                }
            },
            
            "PolicyVariable": {
                "type": "object",
                "description": "A PolicyVariable is an entity for modeling different types of variables that can be used to form a PolicyCondition statement. It can be static or dynamic.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyVariableDynamic"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyVariableStatic"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyVariableDynamic": "#/components/schemas/PolicyVariableDynamic",
                        "PolicyVariableStatic": "#/components/schemas/PolicyVariableStatic"
                    }
                }
            },
            "PolicyVariableDynamic": {
                "type": "object",
                "description": "A PolicyVariableDynamic is a variable that is resolved from event, environment or subject",
                "properties": {
                    "@type": {
                        "type": "string"
                    },
                    "valueType": {
                        "type": "string",
                        "enum": [
                            "string",
                            "number",
                            "integer",
                            "boolean",
                            "object",
                            "array"
                        ]
                    },
                    "format": {
                        "type": "string"
                    },
                    "resolver": {
                        "type": "array",
                        "description": "Specification of a varaible resolver",
                        "items": {
                            "$ref": "#/components/schemas/PolicyVariableResolver"
                        },
                        "minItems": 1
                    }
                }
            },
            
            "PolicyVariableRef": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Reference"
                    },
                    {
                        "type": "object",
                        "description": "Reference to managed PolicyVariable object",
                        "properties": {
                            "@type": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "PolicyVariableRefOrValue": {
                "type": "object",
                "description": "Container for PolicyVariable Reference or unmanaged PolicyVariable object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PolicyVariableRef"
                    },
                    {
                        "$ref": "#/components/schemas/PolicyVariable"
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "PolicyVariableRef": "#/components/schemas/PolicyVariableRef",
                        "PolicyVariable": "#/components/schemas/PolicyVariable",
                        "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable"
                    }
                }
            },
            
            "PolicyVariableResolver": {
                "type": "object",
                "description": "A PolicyVariableResolver is a definition that describes from where is DynamicVariable fetched",
                "properties": {
                    "@type": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "event",
                            "environment",
                            "subject",
                            "result"
                        ]
                    },
                    "path": {
                        "description": "JSONPath of a variable",
                        "type": "string"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Sequence value when PolicyVariableResolver has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
                        "default": 0
                    },
                    "constraint": {
                        "$ref": "#/components/schemas/PolicyConstraintRefOrValue"
                    }
                }
            },
            
            "PolicyVariableStatic": {
                "type": "object",
                "description": "A PolicyVariableStatic is a variable that is ",
                "properties": {
                    "@type": {
                        "type": "string"
                    },
                    "valueType": {
                        "type": "string",
                        "enum": [
                            "string",
                            "number",
                            "integer",
                            "boolean",
                            "object",
                            "array"
                        ]
                    },
                    "format": {
                        "type": "string"
                    },
                    "value": {
                        "$ref": "#/components/schemas/AnyValue"
                    }
                }
            },
            
            "Reference": {
                "type": "object",
                "description": "Reference schema .",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifier of the referred entity."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the referred entity."
                    },
                    "@referredType": {
                        "type": "string",
                        "description": "The actual type of the target instance when needed for disambiguation."
                    }
                },
                "required": [
                    "id"
                ]
            },
            
            "RelatedParty": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "$ref": "#/components/schemas/EntityRef"
                    },
                    {
                        "$ref": "#/components/schemas/Reference"
                    },
                    {
                        "type": "object",
                        "description": "Related Entity reference. A related party defines party linked to a specific entity.",
                        "properties": {
                            "role": {
                                "type": "string",
                                "description": "Role played by the related party"
                            }
                        }
                    }
                ],
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "RelatedParty": "#/components/schemas/RelatedParty"
                    }
                }
            },
            
            "TimePeriod": {
                "type": "object",
                "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
                "properties": {
                    "startDateTime": {
                        "description": "Start of the time period, using IETC-RFC-3339 format",
                        "type": "string",
                        "format": "date-time",
                        "example": "1985-04-12T23:20:50.52Z"
                    },
                    "endDateTime": {
                        "description": "End of the time period, using IETC-RFC-3339 format",
                        "type": "string",
                        "format": "date-time",
                        "example": "1985-04-12T23:20:50.52Z"
                    }
                }
            },
            "Error": {
                "discriminator": {
                    "propertyName": "@type",
                    "mapping": {
                        "Error": "#/components/schemas/Error"
                    }
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Extensible"
                    },
                    {
                        "type": "object",
                        "required": [
                            "code",
                            "reason"
                        ],
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "Application relevant detail, defined in the API or a common list."
                            },
                            "reason": {
                                "type": "string",
                                "description": "Explanation of the reason for the error which can be shown to a client user."
                            },
                            "message": {
                                "type": "string",
                                "description": "More details and corrective actions related to the error which can be shown to a client user."
                            },
                            "status": {
                                "type": "string",
                                "description": "HTTP Error code extension"
                            },
                            "referenceError": {
                                "type": "string",
                                "description": "URI of documentation describing the error."
                            }
                        }
                    }
                ],
                "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
            },
            
        },
        "parameters": {
            "Id": {
                "name": "id",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "in": "path",
                "description": "Identifier of the Service"
            },
            "Fields": {
                "name": "fields",
                "in": "query",
                "description": "Comma-separated properties to be provided in response",
                "schema": {
                    "type": "string"
                }
            },
            "Offset": {
                "name": "offset",
                "in": "query",
                "description": "Requested index for start of resources to be provided in response",
                "schema": {
                    "type": "integer"
                }
            },
            "Limit": {
                "name": "limit",
                "in": "query",
                "description": "Requested number of resources to be provided in response",
                "schema": {
                    "type": "integer"
                }
            }
        },
        "requestBodies": {
            "ManagedPolicy_FVO": {
                "description": "The ManagedPolicy to be created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicy_FVO"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicy_MVO": {
                "description": "The ManagedPolicy to be patched",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicy_MVO"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicy_MVO"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyCreateEvent": {
                "description": "ManagedPolicy create Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyCreateEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyAttributeValueChangeEvent": {
                "description": "ManagedPolicy attributeValueChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyAttributeValueChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyDeleteEvent": {
                "description": "ManagedPolicy delete Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyDeleteEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyStatusChangeEvent": {
                "description": "ManagedPolicy statusChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyStateChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyCondition_FVO": {
                "description": "The ManagedPolicyCondition to be created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyCondition_FVO"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyCondition_MVO": {
                "description": "The ManagedPolicyCondition to be patched",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyCondition_MVO"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyCondition_MVO"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyConditionCreateEvent": {
                "description": "ManagedPolicyCondition create Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConditionCreateEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyConditionAttributeValueChangeEvent": {
                "description": "ManagedPolicyCondition attributeValueChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConditionAttributeValueChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyConditionDeleteEvent": {
                "description": "ManagedPolicyCondition delete Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConditionDeleteEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyConditionStatusChangeEvent": {
                "description": "ManagedPolicyCondition statusChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConditionStateChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyEvent_FVO": {
                "description": "The ManagedPolicyEvent to be created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEvent_FVO"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyEvent_MVO": {
                "description": "The ManagedPolicyEvent to be patched",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEvent_MVO"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEvent_MVO"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyEventCreateEvent": {
                "description": "ManagedPolicyEvent create Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEventCreateEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyEventAttributeValueChangeEvent": {
                "description": "ManagedPolicyEvent attributeValueChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEventAttributeValueChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyEventDeleteEvent": {
                "description": "ManagedPolicyEvent delete Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEventDeleteEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyEventStatusChangeEvent": {
                "description": "ManagedPolicyEvent statusChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEventStateChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyExpression_FVO": {
                "description": "The ManagedPolicyExpression to be created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpression_FVO"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyExpression_MVO": {
                "description": "The ManagedPolicyExpression to be patched",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpression_MVO"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpression_MVO"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyExpressionCreateEvent": {
                "description": "ManagedPolicyExpression create Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpressionCreateEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyExpressionAttributeValueChangeEvent": {
                "description": "ManagedPolicyExpression attributeValueChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpressionAttributeValueChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyExpressionDeleteEvent": {
                "description": "ManagedPolicyExpression delete Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpressionDeleteEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyExpressionStatusChangeEvent": {
                "description": "ManagedPolicyExpression statusChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpressionStateChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyOperator_FVO": {
                "description": "The ManagedPolicyOperator to be created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperator_FVO"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyOperator_MVO": {
                "description": "The ManagedPolicyOperator to be patched",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperator_MVO"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperator_MVO"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyOperatorCreateEvent": {
                "description": "ManagedPolicyOperator create Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperatorCreateEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyOperatorAttributeValueChangeEvent": {
                "description": "ManagedPolicyOperator attributeValueChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperatorAttributeValueChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyOperatorDeleteEvent": {
                "description": "ManagedPolicyOperator delete Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperatorDeleteEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyOperatorStatusChangeEvent": {
                "description": "ManagedPolicyOperator statusChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperatorStateChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyVariable_FVO": {
                "description": "The ManagedPolicyVariable to be created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariable_FVO"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyVariable_MVO": {
                "description": "The ManagedPolicyVariable to be patched",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariable_MVO"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariable_MVO"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyVariableCreateEvent": {
                "description": "ManagedPolicyVariable create Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariableCreateEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyVariableAttributeValueChangeEvent": {
                "description": "ManagedPolicyVariable attributeValueChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariableAttributeValueChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyVariableDeleteEvent": {
                "description": "ManagedPolicyVariable delete Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariableDeleteEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyVariableStatusChangeEvent": {
                "description": "ManagedPolicyVariable statusChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariableStateChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyAction_FVO": {
                "description": "The ManagedPolicyAction to be created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyAction_FVO"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyAction_MVO": {
                "description": "The ManagedPolicyAction to be patched",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyAction_MVO"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyAction_MVO"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyActionCreateEvent": {
                "description": "ManagedPolicyAction create Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyActionCreateEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyActionAttributeValueChangeEvent": {
                "description": "ManagedPolicyAction attributeValueChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyActionAttributeValueChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyActionDeleteEvent": {
                "description": "ManagedPolicyAction delete Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyActionDeleteEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyActionStatusChangeEvent": {
                "description": "ManagedPolicyAction statusChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyActionStateChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyConstraint_FVO": {
                "description": "The ManagedPolicyConstraint to be created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraint_FVO"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyConstraint_MVO": {
                "description": "The ManagedPolicyConstraint to be patched",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraint_MVO"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraint_MVO"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyConstraintCreateEvent": {
                "description": "ManagedPolicyConstraint create Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraintCreateEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyConstraintAttributeValueChangeEvent": {
                "description": "ManagedPolicyConstraint attributeValueChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraintAttributeValueChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyConstraintDeleteEvent": {
                "description": "ManagedPolicyConstraint delete Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraintDeleteEvent"
                        }
                    }
                },
                "required": true
            },
            "ManagedPolicyConstraintStatusChangeEvent": {
                "description": "ManagedPolicyConstraint statusChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraintStateChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "PolicyDomain_FVO": {
                "description": "The PolicyDomain to be created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomain_FVO"
                        }
                    }
                },
                "required": true
            },
            "PolicyDomain_MVO": {
                "description": "The PolicyDomain to be patched",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomain_MVO"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomain_MVO"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    }
                },
                "required": true
            },
            "PolicyDomainCreateEvent": {
                "description": "PolicyDomain create Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomainCreateEvent"
                        }
                    }
                },
                "required": true
            },
            "PolicyDomainAttributeValueChangeEvent": {
                "description": "PolicyDomain attributeValueChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomainAttributeValueChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "PolicyDomainDeleteEvent": {
                "description": "PolicyDomain delete Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomainDeleteEvent"
                        }
                    }
                },
                "required": true
            },
            "PolicyDomainStatusChangeEvent": {
                "description": "PolicyDomain statusChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomainStateChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "PolicyCatalog_FVO": {
                "description": "The PolicyCatalog to be created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalog_FVO"
                        }
                    }
                },
                "required": true
            },
            "PolicyCatalog_MVO": {
                "description": "The PolicyCatalog to be patched",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalog_MVO"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalog_MVO"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/JsonPatchOperations"
                            }
                        }
                    }
                },
                "required": true
            },
            "PolicyCatalogCreateEvent": {
                "description": "PolicyCatalog create Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalogCreateEvent"
                        }
                    }
                },
                "required": true
            },
            "PolicyCatalogAttributeValueChangeEvent": {
                "description": "PolicyCatalog attributeValueChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalogAttributeValueChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "PolicyCatalogDeleteEvent": {
                "description": "PolicyCatalog delete Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalogDeleteEvent"
                        }
                    }
                },
                "required": true
            },
            "PolicyCatalogStatusChangeEvent": {
                "description": "PolicyCatalog statusChange Event payload",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalogStateChangeEvent"
                        }
                    }
                },
                "required": true
            },
            "Hub_FVO": {
                "description": "Data containing the callback endpoint to deliver the information",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Hub_FVO"
                        }
                    }
                },
                "required": true
            }
        },
        "responses": {
            "200": {
                "description": "OK"
            },
            "202": {
                "description": "Accepted"
            },
            "204": {
                "description": "Deleted"
            },
            "400": {
                "description": "Bad Request",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "401": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "403": {
                "description": "Forbidden",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "404": {
                "description": "Not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "405": {
                "description": "Method Not allowed",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "409": {
                "description": "Conflict",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "500": {
                "description": "Internal Server Error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "501": {
                "description": "Not Implemented",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "503": {
                "description": "Service Unavailable",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "200ManagedPolicyArray": {
                "description": "Success",
                "headers": {
                    "X-Total-Count": {
                        "$ref": "#/components/headers/X-Total-Count"
                    },
                    "X-Result-Count": {
                        "$ref": "#/components/headers/X-Result-Count"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ManagedPolicy"
                            }
                        }
                    }
                }
            },
            "200ManagedPolicy_Get": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicy"
                        }
                    }
                }
            },
            "200ManagedPolicy_Patch": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicy"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicy"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicy"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicy"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicy"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicy"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    }
                }
            },
            "200ManagedPolicy_Put": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicy"
                        }
                    }
                }
            },
            "201ManagedPolicy": {
                "description": "Created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicy"
                        }
                    }
                }
            },
            "200ManagedPolicyConditionArray": {
                "description": "Success",
                "headers": {
                    "X-Total-Count": {
                        "$ref": "#/components/headers/X-Total-Count"
                    },
                    "X-Result-Count": {
                        "$ref": "#/components/headers/X-Result-Count"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ManagedPolicyCondition"
                            }
                        }
                    }
                }
            },
            "200ManagedPolicyCondition_Get": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyCondition"
                        }
                    }
                }
            },
            "200ManagedPolicyCondition_Patch": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyCondition"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyCondition"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyCondition"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyCondition"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyCondition"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyCondition"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    }
                }
            },
            "200ManagedPolicyCondition_Put": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyCondition"
                        }
                    }
                }
            },
            "201ManagedPolicyCondition": {
                "description": "Created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyCondition"
                        }
                    }
                }
            },
            "200ManagedPolicyEventArray": {
                "description": "Success",
                "headers": {
                    "X-Total-Count": {
                        "$ref": "#/components/headers/X-Total-Count"
                    },
                    "X-Result-Count": {
                        "$ref": "#/components/headers/X-Result-Count"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ManagedPolicyEvent"
                            }
                        }
                    }
                }
            },
            "200ManagedPolicyEvent_Get": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEvent"
                        }
                    }
                }
            },
            "200ManagedPolicyEvent_Patch": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEvent"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEvent"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyEvent"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyEvent"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyEvent"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyEvent"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    }
                }
            },
            "200ManagedPolicyEvent_Put": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEvent"
                        }
                    }
                }
            },
            "201ManagedPolicyEvent": {
                "description": "Created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyEvent"
                        }
                    }
                }
            },
            "200ManagedPolicyExpressionArray": {
                "description": "Success",
                "headers": {
                    "X-Total-Count": {
                        "$ref": "#/components/headers/X-Total-Count"
                    },
                    "X-Result-Count": {
                        "$ref": "#/components/headers/X-Result-Count"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ManagedPolicyExpression"
                            }
                        }
                    }
                }
            },
            "200ManagedPolicyExpression_Get": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpression"
                        }
                    }
                }
            },
            "200ManagedPolicyExpression_Patch": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpression"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpression"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyExpression"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyExpression"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyExpression"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyExpression"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    }
                }
            },
            "200ManagedPolicyExpression_Put": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpression"
                        }
                    }
                }
            },
            "201ManagedPolicyExpression": {
                "description": "Created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyExpression"
                        }
                    }
                }
            },
            "200ManagedPolicyOperatorArray": {
                "description": "Success",
                "headers": {
                    "X-Total-Count": {
                        "$ref": "#/components/headers/X-Total-Count"
                    },
                    "X-Result-Count": {
                        "$ref": "#/components/headers/X-Result-Count"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ManagedPolicyOperator"
                            }
                        }
                    }
                }
            },
            "200ManagedPolicyOperator_Get": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperator"
                        }
                    }
                }
            },
            "200ManagedPolicyOperator_Patch": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperator"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperator"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyOperator"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyOperator"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyOperator"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyOperator"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    }
                }
            },
            "200ManagedPolicyOperator_Put": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperator"
                        }
                    }
                }
            },
            "201ManagedPolicyOperator": {
                "description": "Created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyOperator"
                        }
                    }
                }
            },
            "200ManagedPolicyVariableArray": {
                "description": "Success",
                "headers": {
                    "X-Total-Count": {
                        "$ref": "#/components/headers/X-Total-Count"
                    },
                    "X-Result-Count": {
                        "$ref": "#/components/headers/X-Result-Count"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ManagedPolicyVariable"
                            }
                        }
                    }
                }
            },
            "200ManagedPolicyVariable_Get": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariable"
                        }
                    }
                }
            },
            "200ManagedPolicyVariable_Patch": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariable"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariable"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyVariable"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyVariable"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyVariable"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyVariable"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    }
                }
            },
            "200ManagedPolicyVariable_Put": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariable"
                        }
                    }
                }
            },
            "201ManagedPolicyVariable": {
                "description": "Created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyVariable"
                        }
                    }
                }
            },
            "200ManagedPolicyActionArray": {
                "description": "Success",
                "headers": {
                    "X-Total-Count": {
                        "$ref": "#/components/headers/X-Total-Count"
                    },
                    "X-Result-Count": {
                        "$ref": "#/components/headers/X-Result-Count"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ManagedPolicyAction"
                            }
                        }
                    }
                }
            },
            "200ManagedPolicyAction_Get": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyAction"
                        }
                    }
                }
            },
            "200ManagedPolicyAction_Patch": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyAction"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyAction"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyAction"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyAction"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyAction"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyAction"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    }
                }
            },
            "200ManagedPolicyAction_Put": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyAction"
                        }
                    }
                }
            },
            "201ManagedPolicyAction": {
                "description": "Created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyAction"
                        }
                    }
                }
            },
            "200ManagedPolicyConstraintArray": {
                "description": "Success",
                "headers": {
                    "X-Total-Count": {
                        "$ref": "#/components/headers/X-Total-Count"
                    },
                    "X-Result-Count": {
                        "$ref": "#/components/headers/X-Result-Count"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ManagedPolicyConstraint"
                            }
                        }
                    }
                }
            },
            "200ManagedPolicyConstraint_Get": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraint"
                        }
                    }
                }
            },
            "200ManagedPolicyConstraint_Patch": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraint"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraint"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyConstraint"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyConstraint"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ManagedPolicyConstraint"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManagedPolicyConstraint"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    }
                }
            },
            "200ManagedPolicyConstraint_Put": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraint"
                        }
                    }
                }
            },
            "201ManagedPolicyConstraint": {
                "description": "Created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ManagedPolicyConstraint"
                        }
                    }
                }
            },
            "200PolicyDomainArray": {
                "description": "Success",
                "headers": {
                    "X-Total-Count": {
                        "$ref": "#/components/headers/X-Total-Count"
                    },
                    "X-Result-Count": {
                        "$ref": "#/components/headers/X-Result-Count"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/PolicyDomain"
                            }
                        }
                    }
                }
            },
            "200PolicyDomain_Get": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomain"
                        }
                    }
                }
            },
            "200PolicyDomain_Patch": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomain"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomain"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/PolicyDomain"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PolicyDomain"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/PolicyDomain"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PolicyDomain"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    }
                }
            },
            "200PolicyDomain_Put": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomain"
                        }
                    }
                }
            },
            "201PolicyDomain": {
                "description": "Created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyDomain"
                        }
                    }
                }
            },
            "200PolicyCatalogArray": {
                "description": "Success",
                "headers": {
                    "X-Total-Count": {
                        "$ref": "#/components/headers/X-Total-Count"
                    },
                    "X-Result-Count": {
                        "$ref": "#/components/headers/X-Result-Count"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/PolicyCatalog"
                            }
                        }
                    }
                }
            },
            "200PolicyCatalog_Get": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalog"
                        }
                    }
                }
            },
            "200PolicyCatalog_Patch": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalog"
                        }
                    },
                    "application/merge-patch+json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalog"
                        }
                    },
                    "application/json-patch+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/PolicyCatalog"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PolicyCatalog"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    },
                    "application/json-patch-query+json": {
                        "schema": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/PolicyCatalog"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PolicyCatalog"
                                    }
                                },
                                {
                                    "type": "string",
                                    "nullable": true
                                }
                            ]
                        }
                    }
                }
            },
            "200PolicyCatalog_Put": {
                "description": "Success",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalog"
                        }
                    }
                }
            },
            "201PolicyCatalog": {
                "description": "Created",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PolicyCatalog"
                        }
                    }
                }
            },
            "Error": {
                "description": "Error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "Hub": {
                "description": "Notified",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Hub"
                        }
                    }
                }
            }
        },
        "headers": {
            "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                    "type": "integer"
                }
            },
            "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                    "type": "integer"
                }
            }
        },
        "securitySchemes": {},
        "examples": {}
    }
}
